<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sales Dashboard</title>
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <!-- Dark Mode Toggle -->
    <button class="theme-toggle" id="themeToggle">
        <i class="icon fas fa-sun" id="themeIcon"></i>
        <span id="themeText">Light Mode</span>
    </button>

    <div class="container">
        <header>
            <h1>Sales & Vendor Analysis Dashboard</h1>
            <p>Visualizing sales performance and vendor distribution.</p>
        </header>

        <div class="key-metrics">
            <div class="metric-card">
                <h4>Total Bill Amount</h4>
                <p>₹<%= totalRevenue.toLocaleString('en-IN') %></p>
            </div>
            <div class="metric-card">
                <h4>Total Products Sold</h4>
                <p><%= totalProductsSold.toLocaleString() %></p>
            </div>
            <div class="metric-card">
                <h4>Total Unique Vendors</h4>
                <p><%= uniqueVendors %></p>
            </div>
            <div class="metric-card">
                <h4>Areas Covered</h4>
                <p><%= uniqueAreasCovered %></p>
            </div>
        </div>

        <div class="card filter-card">
             <form id="filter-form" action="/" method="GET">
                <h3>Filters:</h3>
                <div class="filter-row">
                    <select name="area">
                        <option value="all">All Areas</option>
                        <% areas.forEach(area => { %>
                            <option value="<%= area %>" <%= currentFilters.area === area ? 'selected' : '' %>><%= area %></option>
                        <% }); %>
                    </select>
                    <select name="product">
                        <option value="all">All Products</option>
                        <% products.forEach(product => { %>
                            <option value="<%= product %>" <%= currentFilters.product === product ? 'selected' : '' %>><%= product %></option>
                        <% }); %>
                    </select>
                    <select name="transport">
                        <option value="all">All Transports</option>
                        <% transports.forEach(transport => { %>
                            <option value="<%= transport %>" <%= currentFilters.transport === transport ? 'selected' : '' %>><%= transport %></option>
                        <% }); %>
                    </select>
                    <select name="paymentStatus">
                        <option value="all">All Payment Status</option>
                        <option value="Paid" <%= currentFilters.paymentStatus === 'Paid' ? 'selected' : '' %>>Paid</option>
                        <option value="Due" <%= currentFilters.paymentStatus === 'Due' ? 'selected' : '' %>>Due</option>
                        <option value="Overdue" <%= currentFilters.paymentStatus === 'Overdue' ? 'selected' : '' %>>Overdue</option>
                    </select>
                </div>
                <div class="filter-row">
                    <div class="date-filter">
                        <label for="startDate">From Date:</label>
                        <input type="date" id="startDate" name="startDate" value="<%= currentFilters.startDate || '' %>">
                    </div>
                    <div class="date-filter">
                        <label for="endDate">To Date:</label>
                        <input type="date" id="endDate" name="endDate" value="<%= currentFilters.endDate || '' %>">
                    </div>
                </div>
                <div class="filter-actions">
                    <button type="submit">Apply</button>
                    <a href="/" class="reset-btn">Reset</a>
                </div>
            </form>
        </div>

        <div class="charts-grid">
            <div class="card chart-card">
                <h3>Products Sold by Area</h3>
                <div class="chart-container">
                    <canvas id="salesByAreaChart"></canvas>
                </div>
            </div>
            <div class="card chart-card">
                <h3>Vendors by Area</h3>
                <div class="chart-container">
                    <canvas id="vendorsByAreaChart"></canvas>
                </div>
            </div>
        </div>

        <div class="card table-card">
            <div class="table-header">
                <h3>Detailed Orders</h3>
                <a href="/add" class="add-btn">Add New Sale</a>
            </div>
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th>Dispatch Date</th>
                            <th>Vendor</th>
                            <th>Contact</th>
                            <th>Area</th>
                            <th>Product</th>
                            <th>Qty</th>
                            <th>Bill (INR)</th>
                            <th>Due Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% sales.forEach(sale => { %>
                            <tr>
                                <td><%= new Date(sale.orderDispatchDate).toLocaleDateString() %></td>
                                <td><%= sale.vendorName %></td>
                                <td><%= sale.contact || 'N/A' %></td>
                                <td><%= sale.area %></td>
                                <td><%= sale.productOrdered %></td>
                                <td><%= sale.qtyOrdered %></td>
                                <td>₹<%= sale.totalBillAmount.toLocaleString('en-IN') %></td>
                                <td><%= sale.dueDate ? new Date(sale.dueDate).toLocaleDateString() : 'N/A' %></td>
                                                                 <td class="status-<%= sale.paymentStatus.toLowerCase() %>">
                                     <%= sale.paymentStatus %>
                                     <% if (sale.paymentStatus === 'Overdue' && sale.overdueDays > 0) { %>
                                         <br><small>(<%= sale.overdueDays %> days overdue)</small>
                                     <% } %>
                                 </td>
                                <td class="actions">
                                    <a href="/edit/<%= sale._id %>" class="edit-btn">Edit</a>
                                    <form action="/delete/<%= sale._id %>" method="POST" style="display:inline;">
                                        <button type="submit" class="delete-btn" onclick="return confirm('Are you sure you want to delete this record?');">Delete</button>
                                    </form>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>

    </div>

    <script>
        // Data passed from EJS template
        let salesByAreaData = <%- JSON.stringify(salesByArea) %>;
        let vendorsByAreaData = <%- JSON.stringify(vendorsByArea) %>;

        // Debug logging
        console.log('Sales by Area Data:', salesByAreaData);
        console.log('Vendors by Area Data:', vendorsByAreaData);

        // Ensure data is valid
        if (!salesByAreaData || typeof salesByAreaData !== 'object') {
            salesByAreaData = {};
        }
        if (!vendorsByAreaData || typeof vendorsByAreaData !== 'object') {
            vendorsByAreaData = {};
        }

        // Sales by Area Chart
        try {
            console.log('Creating Sales by Area chart with data:', salesByAreaData);
            console.log('Chart element:', document.getElementById('salesByAreaChart'));

            if (Object.keys(salesByAreaData).length === 0) {
                document.getElementById('salesByAreaChart').innerHTML = '<p style="text-align: center; color: #666;">No data available</p>';
            } else {
                const salesChart = new Chart(document.getElementById('salesByAreaChart'), {
                    type: 'bar',
                    data: {
                        labels: Object.keys(salesByAreaData),
                        datasets: [{
                            label: 'Quantity Sold',
                            data: Object.values(salesByAreaData),
                            backgroundColor: 'rgba(54, 162, 235, 0.6)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1,
                            borderRadius: 5
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: { y: { beginAtZero: true } },
                        plugins: { legend: { display: false } }
                    }
                });
            }
        } catch (error) {
            console.error('Error creating Sales by Area chart:', error);
            document.getElementById('salesByAreaChart').innerHTML = '<p style="text-align: center; color: #666;">Chart data not available</p>';
        }

        // Vendors by Area Chart
        try {
            console.log('Creating Vendors by Area chart with data:', vendorsByAreaData);
            console.log('Chart element:', document.getElementById('vendorsByAreaChart'));

            if (Object.keys(vendorsByAreaData).length === 0) {
                document.getElementById('vendorsByAreaChart').innerHTML = '<p style="text-align: center; color: #666;">No data available</p>';
            } else {
                const vendorsChart = new Chart(document.getElementById('vendorsByAreaChart'), {
                    type: 'doughnut',
                    data: {
                        labels: Object.keys(vendorsByAreaData),
                        datasets: [{
                            label: 'Number of Vendors',
                            data: Object.values(vendorsByAreaData),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.6)', 'rgba(255, 206, 86, 0.6)',
                                'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)',
                                'rgba(255, 159, 64, 0.6)', 'rgba(54, 162, 235, 0.6)'
                            ],
                            borderColor: [
                                'rgba(255, 99, 132, 1)', 'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)', 'rgba(54, 162, 235, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: { legend: { position: 'top' } }
                    }
                });
            }
                 } catch (error) {
             console.error('Error creating Vendors by Area chart:', error);
             document.getElementById('vendorsByAreaChart').innerHTML = '<p style="text-align: center; color: #666;">Chart data not available</p>';
         }

         // Dark Mode Toggle Functionality
         const themeToggle = document.getElementById('themeToggle');
         const themeIcon = document.getElementById('themeIcon');
         const themeText = document.getElementById('themeText');
         const body = document.body;

         // Check for saved theme preference or default to light mode
         const currentTheme = localStorage.getItem('theme') || 'light';
         body.setAttribute('data-theme', currentTheme);
         updateThemeUI(currentTheme);

         themeToggle.addEventListener('click', () => {
             const currentTheme = body.getAttribute('data-theme');
             const newTheme = currentTheme === 'dark' ? 'light' : 'dark';

             body.setAttribute('data-theme', newTheme);
             localStorage.setItem('theme', newTheme);
             updateThemeUI(newTheme);
         });

         function updateThemeUI(theme) {
             if (theme === 'dark') {
                 themeIcon.className = 'icon fas fa-moon';
                 themeText.textContent = 'Dark Mode';
             } else {
                 themeIcon.className = 'icon fas fa-sun';
                 themeText.textContent = 'Light Mode';
             }
         }
     </script>
</body>
</html>